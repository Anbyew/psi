// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

namespace Microsoft.Psi.MixedReality
{
    using System;
    using System.Runtime.InteropServices;
    using StereoKit;

    /// <summary>
    /// Provides helper methods for converting between OpenXR and platform times.
    /// </summary>
    internal static class TimeHelper
    {
        private static readonly double QpcToHns;
        private static XR_xrConvertTimeToWin32PerformanceCounterKHR openXrConvertTimeToWin32PerformanceCounterKHR;

        /// <summary>
        /// Initializes static members of the <see cref="TimeHelper"/> class.
        /// </summary>
        static TimeHelper()
        {
            NativeMethods.QueryPerformanceFrequency(out long frequency);
            QpcToHns = 10000000.0 / frequency;
        }

        private delegate int XR_xrConvertTimeToWin32PerformanceCounterKHR(ulong instance, long time, out long performanceCount);

        /// <summary>
        /// Converts an OpenXR time value as returned from Backend.OpenXR.Time to 100 ns ticks based on the performance counter.
        /// </summary>
        /// <param name="openXrTime">The OpenXR time value.</param>
        /// <returns>The equivalent performance counter value in 100 ns ticks.</returns>
        internal static long ConvertXrTimeToHnsTicks(long openXrTime)
        {
            return (long)(ConvertXrTimeToWin32PerformanceCounter(openXrTime) * QpcToHns);
        }

        /// <summary>
        /// Converts an OpenXR time value as returned from Backend.OpenXR.Time to a performance counter value as if generated by the QueryPerformanceCounter function.
        /// </summary>
        /// <param name="openXrTime">The OpenXR time value.</param>
        /// <returns>The equivalent performance counter value.</returns>
        private static long ConvertXrTimeToWin32PerformanceCounter(long openXrTime)
        {
            // Initialize the delegate on first use
            if (openXrConvertTimeToWin32PerformanceCounterKHR == null)
            {
                if (!SK.IsInitialized)
                {
                    throw new InvalidOperationException("Attempting to convert OpenXR time before StereoKit is initialized. Ensure that SK.Initialize() has been called first.");
                }

                if (Backend.XRType != BackendXRType.OpenXR)
                {
                    throw new InvalidOperationException("Cannot convert OpenXR time. Backend XR type is not OpenXR.");
                }

                openXrConvertTimeToWin32PerformanceCounterKHR = Backend.OpenXR.GetFunction<XR_xrConvertTimeToWin32PerformanceCounterKHR>("xrConvertTimeToWin32PerformanceCounterKHR");
            }

            // Get the raw performance counter value
            openXrConvertTimeToWin32PerformanceCounterKHR(Backend.OpenXR.Instance, openXrTime, out long performanceCount);

            return performanceCount;
        }

        /// <summary>
        /// Provides native APIs used by the <see cref="TimeHelper"/> class.
        /// </summary>
        private static class NativeMethods
        {
            /// <summary>
            /// Retrieves the current value of the performance counter.
            /// </summary>
            /// <param name="performanceCount">A variable that receives the current performance-counter value, in counts.</param>
            /// <returns>True if the function succeeds, false otherwise.</returns>
            [DllImport("kernel32.dll")]
            internal static extern bool QueryPerformanceCounter(out long performanceCount);

            /// <summary>
            /// Retrieves the frequency of the performance counter.
            /// </summary>
            /// <param name="frequency">A variable that receives the current performance-counter frequency, in counts per second.</param>
            /// <returns>True if the function succeeds, false otherwise.</returns>
            [DllImport("kernel32.dll")]
            internal static extern bool QueryPerformanceFrequency(out long frequency);
        }
    }
}
